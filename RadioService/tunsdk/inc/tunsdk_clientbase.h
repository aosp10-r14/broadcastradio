/*=============================================================================
        start of file generated by pidl version 1.0.0       
=============================================================================*/

/*******************************************************************************
 * Copyright (c) 2019-2020 OpenSynergy GmbH.
 *
 * This software may not be used in any way or distributed without
 * permission. All rights reserved.
 ******************************************************************************/

/**
 *@file    tunsdk_clientbase.h $RelUrl: trunk/inc/sdk01/tunsdk_clientbase.h $
 *@version $LastChangedRevision: 10583 $
 *  
 *@brief This file contains the base class CTUNSDK_ClientBase
 *
 * 
 */

#ifndef TUNSDK_CLIENTBASE_H_
#define TUNSDK_CLIENTBASE_H_

/*-----------------------------------------------------------------------------
    includes
-----------------------------------------------------------------------------*/
#include "tunsdk_types.h"

class CTUNSDK_ApiImpl;


struct Ts_TUNSDK_On_Start_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_Start_Response
 */        
struct Ts_TUNSDK_On_Start_Response_Handle
{
private:
    Ts_TUNSDK_On_Start_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_Start_Response_Handle(Ts_TUNSDK_On_Start_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_Stop_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_Stop_Response
 */        
struct Ts_TUNSDK_On_Stop_Response_Handle
{
private:
    Ts_TUNSDK_On_Stop_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_Stop_Response_Handle(Ts_TUNSDK_On_Stop_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_Availability_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_Availability_Notification
 */
struct Ts_TUNSDK_On_Availability_Notification_Handle
{
    /**
     *@brief extract available out of Ts_TUNSDK_On_Availability_Notification
     *@returns member "available" : if true, avaialble, if false, not available
     */
    bool available(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_Availability_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_Availability_Notification_Handle(const Ts_TUNSDK_On_Availability_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_GetAvailability_Response;

/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_GetAvailability_Response
 */        
struct Ts_TUNSDK_On_GetAvailability_Response_Handle
{
    /**
     *@brief extract available out of Ts_TUNSDK_On_GetAvailability_Response
     *@returns member "available" : the availability status of TUNSDK
     */
    bool available(void) const;
private:
    Ts_TUNSDK_On_GetAvailability_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_GetAvailability_Response_Handle(Ts_TUNSDK_On_GetAvailability_Response*pData) : m_pData(pData){}
};

struct Ts_TUNSDK_On_SetMode_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_SetMode_Response
 */        
struct Ts_TUNSDK_On_SetMode_Response_Handle
{
private:
    Ts_TUNSDK_On_SetMode_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_SetMode_Response_Handle(Ts_TUNSDK_On_SetMode_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_SetModeStationAmFm_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_SetModeStationAmFm_Response
 */        
struct Ts_TUNSDK_On_SetModeStationAmFm_Response_Handle
{
private:
    Ts_TUNSDK_On_SetModeStationAmFm_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_SetModeStationAmFm_Response_Handle(Ts_TUNSDK_On_SetModeStationAmFm_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_SetModeStationDab_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_SetModeStationDab_Response
 */        
struct Ts_TUNSDK_On_SetModeStationDab_Response_Handle
{
private:
    Ts_TUNSDK_On_SetModeStationDab_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_SetModeStationDab_Response_Handle(Ts_TUNSDK_On_SetModeStationDab_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_SelectedStation_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_SelectedStation_Notification
 */
struct Ts_TUNSDK_On_SelectedStation_Notification_Handle
{
    /**
     *@brief extract station out of Ts_TUNSDK_On_SelectedStation_Notification
     *@returns member "station" : the updated station data including frequency, name, etc.
     */
    Ts_tunsdk_station_Handle station(void) const;
    /**
     *@brief extract radioState out of Ts_TUNSDK_On_SelectedStation_Notification
     *@returns member "radioState" : the radio state, can be used to see whether TUNSDK is currently executing a longer lasting command, check the Te_tunsdk_radioState documentation for details
     */
    Te_tunsdk_radioState radioState(void) const;
    /**
     *@brief extract currStlIndex out of Ts_TUNSDK_On_SelectedStation_Notification
     *@returns member "currStlIndex" : the selected station's index in the station list. 0xFFFFFFFF indicates the station is not in the current station list
     */
    uint32_t currStlIndex(void) const;
    /**
     *@brief extract stationMetaData out of Ts_TUNSDK_On_SelectedStation_Notification
     *@returns member "stationMetaData" : Additional metadata for the currently tuned station like Radio Text
     */
    Ts_tunsdk_metaData_Handle stationMetaData(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_SelectedStation_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_SelectedStation_Notification_Handle(const Ts_TUNSDK_On_SelectedStation_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_SelectStationAmFm_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_SelectStationAmFm_Response
 */        
struct Ts_TUNSDK_On_SelectStationAmFm_Response_Handle
{
private:
    Ts_TUNSDK_On_SelectStationAmFm_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_SelectStationAmFm_Response_Handle(Ts_TUNSDK_On_SelectStationAmFm_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_SelectStationDab_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_SelectStationDab_Response
 */        
struct Ts_TUNSDK_On_SelectStationDab_Response_Handle
{
private:
    Ts_TUNSDK_On_SelectStationDab_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_SelectStationDab_Response_Handle(Ts_TUNSDK_On_SelectStationDab_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_TuneUpDown_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_TuneUpDown_Response
 */        
struct Ts_TUNSDK_On_TuneUpDown_Response_Handle
{
private:
    Ts_TUNSDK_On_TuneUpDown_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_TuneUpDown_Response_Handle(Ts_TUNSDK_On_TuneUpDown_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_Seek_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_Seek_Response
 */        
struct Ts_TUNSDK_On_Seek_Response_Handle
{
private:
    Ts_TUNSDK_On_Seek_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_Seek_Response_Handle(Ts_TUNSDK_On_Seek_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_SeekNonStop_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_SeekNonStop_Response
 */        
struct Ts_TUNSDK_On_SeekNonStop_Response_Handle
{
private:
    Ts_TUNSDK_On_SeekNonStop_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_SeekNonStop_Response_Handle(Ts_TUNSDK_On_SeekNonStop_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_SeekDab_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_SeekDab_Response
 */        
struct Ts_TUNSDK_On_SeekDab_Response_Handle
{
private:
    Ts_TUNSDK_On_SeekDab_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_SeekDab_Response_Handle(Ts_TUNSDK_On_SeekDab_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_SeekStop_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_SeekStop_Response
 */        
struct Ts_TUNSDK_On_SeekStop_Response_Handle
{
private:
    Ts_TUNSDK_On_SeekStop_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_SeekStop_Response_Handle(Ts_TUNSDK_On_SeekStop_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_SeekCancel_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_SeekCancel_Response
 */        
struct Ts_TUNSDK_On_SeekCancel_Response_Handle
{
private:
    Ts_TUNSDK_On_SeekCancel_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_SeekCancel_Response_Handle(Ts_TUNSDK_On_SeekCancel_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_AmStationList_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_AmStationList_Notification
 */
struct Ts_TUNSDK_On_AmStationList_Notification_Handle
{
    /**
     *@brief extract stationList out of Ts_TUNSDK_On_AmStationList_Notification
     *@returns member "stationList" : the actual station list
     */
    Ts_tunsdk_am_station_list_Handle stationList(void) const;
    /**
     *@brief extract currentStationIndex out of Ts_TUNSDK_On_AmStationList_Notification
     *@returns member "currentStationIndex" : the position of the currently selected station in that list or 0xFFFFFFFF in case it is not contained.
     */
    uint32_t currentStationIndex(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_AmStationList_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_AmStationList_Notification_Handle(const Ts_TUNSDK_On_AmStationList_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_FmStationList_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_FmStationList_Notification
 */
struct Ts_TUNSDK_On_FmStationList_Notification_Handle
{
    /**
     *@brief extract stationList out of Ts_TUNSDK_On_FmStationList_Notification
     *@returns member "stationList" : the actual station list
     */
    Ts_tunsdk_fm_station_list_Handle stationList(void) const;
    /**
     *@brief extract currentStationIndex out of Ts_TUNSDK_On_FmStationList_Notification
     *@returns member "currentStationIndex" : the position of the currently selected station in that list or 0xFFFFFFFF in case it is not contained.
     */
    uint32_t currentStationIndex(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_FmStationList_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_FmStationList_Notification_Handle(const Ts_TUNSDK_On_FmStationList_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_DabStationList_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_DabStationList_Notification
 */
struct Ts_TUNSDK_On_DabStationList_Notification_Handle
{
    /**
     *@brief extract stationList out of Ts_TUNSDK_On_DabStationList_Notification
     *@returns member "stationList" : the actual station list
     */
    Ts_tunsdk_dab_station_list_Handle stationList(void) const;
    /**
     *@brief extract currentStationIndex out of Ts_TUNSDK_On_DabStationList_Notification
     *@returns member "currentStationIndex" : the position of the currently selected station in that list or 0xFFFFFFFF in case it is not contained.
     */
    uint32_t currentStationIndex(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_DabStationList_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_DabStationList_Notification_Handle(const Ts_TUNSDK_On_DabStationList_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_UpdateStationList_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_UpdateStationList_Response
 */        
struct Ts_TUNSDK_On_UpdateStationList_Response_Handle
{
private:
    Ts_TUNSDK_On_UpdateStationList_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_UpdateStationList_Response_Handle(Ts_TUNSDK_On_UpdateStationList_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_UpdateStationListCancel_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_UpdateStationListCancel_Response
 */        
struct Ts_TUNSDK_On_UpdateStationListCancel_Response_Handle
{
private:
    Ts_TUNSDK_On_UpdateStationListCancel_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_UpdateStationListCancel_Response_Handle(Ts_TUNSDK_On_UpdateStationListCancel_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_ConfigureSetting_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_ConfigureSetting_Response
 */        
struct Ts_TUNSDK_On_ConfigureSetting_Response_Handle
{
private:
    Ts_TUNSDK_On_ConfigureSetting_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_ConfigureSetting_Response_Handle(Ts_TUNSDK_On_ConfigureSetting_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_ConfiguredSettings_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_ConfiguredSettings_Notification
 */
struct Ts_TUNSDK_On_ConfiguredSettings_Notification_Handle
{
    /**
     *@brief extract settings out of Ts_TUNSDK_On_ConfiguredSettings_Notification
     *@returns member "settings" : the settings
     */
    Ts_tunsdk_settings_Handle settings(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_ConfiguredSettings_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_ConfiguredSettings_Notification_Handle(const Ts_TUNSDK_On_ConfiguredSettings_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_GetConfiguredSettings_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_GetConfiguredSettings_Response
 */        
struct Ts_TUNSDK_On_GetConfiguredSettings_Response_Handle
{
private:
    Ts_TUNSDK_On_GetConfiguredSettings_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_GetConfiguredSettings_Response_Handle(Ts_TUNSDK_On_GetConfiguredSettings_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_GetStationList_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_GetStationList_Response
 */        
struct Ts_TUNSDK_On_GetStationList_Response_Handle
{
private:
    Ts_TUNSDK_On_GetStationList_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_GetStationList_Response_Handle(Ts_TUNSDK_On_GetStationList_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_ResetFactoryDefault_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_ResetFactoryDefault_Response
 */        
struct Ts_TUNSDK_On_ResetFactoryDefault_Response_Handle
{
private:
    Ts_TUNSDK_On_ResetFactoryDefault_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_ResetFactoryDefault_Response_Handle(Ts_TUNSDK_On_ResetFactoryDefault_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_TPStatus_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_TPStatus_Notification
 */
struct Ts_TUNSDK_On_TPStatus_Notification_Handle
{
    /**
     *@brief extract tpStatusData out of Ts_TUNSDK_On_TPStatus_Notification
     *@returns member "tpStatusData" : the TP status
     */
    Te_tunsdk_tpStatus tpStatusData(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_TPStatus_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_TPStatus_Notification_Handle(const Ts_TUNSDK_On_TPStatus_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_Announcement_Background_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_Announcement_Background_Notification
 */
struct Ts_TUNSDK_On_Announcement_Background_Notification_Handle
{
    /**
     *@brief extract station out of Ts_TUNSDK_On_Announcement_Background_Notification
     *@returns member "station" : the station on which the announcement is happening.
     */
    Ts_tunsdk_station_Handle station(void) const;
    /**
     *@brief extract annoType out of Ts_TUNSDK_On_Announcement_Background_Notification
     *@returns member "annoType" : the type of announcement that is happening
     */
    Te_tunsdk_announcement_type annoType(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_Announcement_Background_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_Announcement_Background_Notification_Handle(const Ts_TUNSDK_On_Announcement_Background_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_Announcement_Start_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_Announcement_Start_Notification
 */
struct Ts_TUNSDK_On_Announcement_Start_Notification_Handle
{
    /**
     *@brief extract station out of Ts_TUNSDK_On_Announcement_Start_Notification
     *@returns member "station" : the station from which the announcement comes
     */
    Ts_tunsdk_station_Handle station(void) const;
    /**
     *@brief extract annoType out of Ts_TUNSDK_On_Announcement_Start_Notification
     *@returns member "annoType" : the type of announcement
     */
    Te_tunsdk_announcement_type annoType(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_Announcement_Start_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_Announcement_Start_Notification_Handle(const Ts_TUNSDK_On_Announcement_Start_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_Announcement_End_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_Announcement_End_Notification
 */
struct Ts_TUNSDK_On_Announcement_End_Notification_Handle
{
    /**
     *@brief extract station out of Ts_TUNSDK_On_Announcement_End_Notification
     *@returns member "station" : the station on which the announcement has ended.
     */
    Ts_tunsdk_station_Handle station(void) const;
    /**
     *@brief extract annoType out of Ts_TUNSDK_On_Announcement_End_Notification
     *@returns member "annoType" : the type of announcement that has ended.
     */
    Te_tunsdk_announcement_type annoType(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_Announcement_End_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_Announcement_End_Notification_Handle(const Ts_TUNSDK_On_Announcement_End_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_AnnouncementCancel_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_AnnouncementCancel_Response
 */        
struct Ts_TUNSDK_On_AnnouncementCancel_Response_Handle
{
private:
    Ts_TUNSDK_On_AnnouncementCancel_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_AnnouncementCancel_Response_Handle(Ts_TUNSDK_On_AnnouncementCancel_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_DabAudioStatus_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_DabAudioStatus_Notification
 */
struct Ts_TUNSDK_On_DabAudioStatus_Notification_Handle
{
    /**
     *@brief extract dabAudioStatus out of Ts_TUNSDK_On_DabAudioStatus_Notification
     *@returns member "dabAudioStatus" : the reception status
     */
    Te_tunsdk_dab_audio_status dabAudioStatus(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_DabAudioStatus_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_DabAudioStatus_Notification_Handle(const Ts_TUNSDK_On_DabAudioStatus_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_HdAudioStatus_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_HdAudioStatus_Notification
 */
struct Ts_TUNSDK_On_HdAudioStatus_Notification_Handle
{
    /**
     *@brief extract tunable out of Ts_TUNSDK_On_HdAudioStatus_Notification
     *@returns member "tunable" : the tuning information for which the audio status is notified. This may be used to prevent mixing up audio states during change of station.
     */
    Ts_tunsdk_amfmhd_tunable_Handle tunable(void) const;
    /**
     *@brief extract hdAudioStatus out of Ts_TUNSDK_On_HdAudioStatus_Notification
     *@returns member "hdAudioStatus" : the audio status 
     */
    Te_tunsdk_hd_audio_status hdAudioStatus(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_HdAudioStatus_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_HdAudioStatus_Notification_Handle(const Ts_TUNSDK_On_HdAudioStatus_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_AmFmSetTmcService_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_AmFmSetTmcService_Response
 */        
struct Ts_TUNSDK_On_AmFmSetTmcService_Response_Handle
{
private:
    Ts_TUNSDK_On_AmFmSetTmcService_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_AmFmSetTmcService_Response_Handle(Ts_TUNSDK_On_AmFmSetTmcService_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_AmFmSetTmcScan_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_AmFmSetTmcScan_Response
 */        
struct Ts_TUNSDK_On_AmFmSetTmcScan_Response_Handle
{
private:
    Ts_TUNSDK_On_AmFmSetTmcScan_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_AmFmSetTmcScan_Response_Handle(Ts_TUNSDK_On_AmFmSetTmcScan_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_AmFmTmcChannel_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_AmFmTmcChannel_Notification
 */
struct Ts_TUNSDK_On_AmFmTmcChannel_Notification_Handle
{
    /**
     *@brief extract pi out of Ts_TUNSDK_On_AmFmTmcChannel_Notification
     *@returns member "pi" : The pi code of the station used for reception.
     */
    uint32_t pi(void) const;
    /**
     *@brief extract freqKHz out of Ts_TUNSDK_On_AmFmTmcChannel_Notification
     *@returns member "freqKHz" : The frequency used for reception.
     */
    uint32_t freqKHz(void) const;
    /**
     *@brief extract channel out of Ts_TUNSDK_On_AmFmTmcChannel_Notification
     *@returns member "channel" : The TMC parameters used for recetpion.
     */
    Ts_tunsdk_amfmTmcChannel_Handle channel(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_AmFmTmcChannel_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_AmFmTmcChannel_Notification_Handle(const Ts_TUNSDK_On_AmFmTmcChannel_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_AmFmTmcMessage_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_AmFmTmcMessage_Notification
 */
struct Ts_TUNSDK_On_AmFmTmcMessage_Notification_Handle
{
    /**
     *@brief extract freqKHz out of Ts_TUNSDK_On_AmFmTmcMessage_Notification
     *@returns member "freqKHz" : The frequency this RDS data was received on
     */
    uint32_t freqKHz(void) const;
    /**
     *@brief extract sid out of Ts_TUNSDK_On_AmFmTmcMessage_Notification
     *@returns member "sid" : The service identifier of the channel
     */
    uint8_t sid(void) const;
    /**
     *@brief extract ltn out of Ts_TUNSDK_On_AmFmTmcMessage_Notification
     *@returns member "ltn" : The location table number of the channel
     */
    uint8_t ltn(void) const;
    /**
     *@brief extract block_a out of Ts_TUNSDK_On_AmFmTmcMessage_Notification
     *@returns member "block_a" : RDS block a
     */
    uint16_t block_a(void) const;
    /**
     *@brief extract block_b out of Ts_TUNSDK_On_AmFmTmcMessage_Notification
     *@returns member "block_b" : RDS block b
     */
    uint16_t block_b(void) const;
    /**
     *@brief extract block_c out of Ts_TUNSDK_On_AmFmTmcMessage_Notification
     *@returns member "block_c" : RDS block c
     */
    uint16_t block_c(void) const;
    /**
     *@brief extract block_d out of Ts_TUNSDK_On_AmFmTmcMessage_Notification
     *@returns member "block_d" : RDS block d
     */
    uint16_t block_d(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_AmFmTmcMessage_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_AmFmTmcMessage_Notification_Handle(const Ts_TUNSDK_On_AmFmTmcMessage_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_Slideshow_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_Slideshow_Notification
 */
struct Ts_TUNSDK_On_Slideshow_Notification_Handle
{
    /**
     *@brief extract slide out of Ts_TUNSDK_On_Slideshow_Notification
     *@returns member "slide" : the slidemetadata
     */
    Ts_tunsdk_slide_Handle slide(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_Slideshow_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_Slideshow_Notification_Handle(const Ts_TUNSDK_On_Slideshow_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_DabEPG_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_DabEPG_Notification
 */
struct Ts_TUNSDK_On_DabEPG_Notification_Handle
{
    /**
     *@brief extract epgData out of Ts_TUNSDK_On_DabEPG_Notification
     *@returns member "epgData" : epg data for the file, raw file data + meta data
     */
    Ts_tunsdk_dab_epg_Handle epgData(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_DabEPG_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_DabEPG_Notification_Handle(const Ts_TUNSDK_On_DabEPG_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_PresetStore_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_PresetStore_Response
 */        
struct Ts_TUNSDK_On_PresetStore_Response_Handle
{
private:
    Ts_TUNSDK_On_PresetStore_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_PresetStore_Response_Handle(Ts_TUNSDK_On_PresetStore_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_PresetList_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_PresetList_Notification
 */
struct Ts_TUNSDK_On_PresetList_Notification_Handle
{
    /**
     *@brief extract presetList out of Ts_TUNSDK_On_PresetList_Notification
     *@returns member "presetList" : the actual preset list
     */
    Ts_tunsdk_preset_list_Handle presetList(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_PresetList_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_PresetList_Notification_Handle(const Ts_TUNSDK_On_PresetList_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_PresetGetList_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_PresetGetList_Response
 */        
struct Ts_TUNSDK_On_PresetGetList_Response_Handle
{
private:
    Ts_TUNSDK_On_PresetGetList_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_PresetGetList_Response_Handle(Ts_TUNSDK_On_PresetGetList_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_PresetRecall_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_PresetRecall_Response
 */        
struct Ts_TUNSDK_On_PresetRecall_Response_Handle
{
private:
    Ts_TUNSDK_On_PresetRecall_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_PresetRecall_Response_Handle(Ts_TUNSDK_On_PresetRecall_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_RequireModeChange_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_RequireModeChange_Notification
 */
struct Ts_TUNSDK_On_RequireModeChange_Notification_Handle
{
    /**
     *@brief extract requiredMode out of Ts_TUNSDK_On_RequireModeChange_Notification
     *@returns member "requiredMode" : the mode that needs to be changed to.
     */
    Te_tunsdk_mode requiredMode(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_RequireModeChange_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_RequireModeChange_Notification_Handle(const Ts_TUNSDK_On_RequireModeChange_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_PresetClear_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_PresetClear_Response
 */        
struct Ts_TUNSDK_On_PresetClear_Response_Handle
{
private:
    Ts_TUNSDK_On_PresetClear_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_PresetClear_Response_Handle(Ts_TUNSDK_On_PresetClear_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_PresetMove_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_PresetMove_Response
 */        
struct Ts_TUNSDK_On_PresetMove_Response_Handle
{
private:
    Ts_TUNSDK_On_PresetMove_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_PresetMove_Response_Handle(Ts_TUNSDK_On_PresetMove_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_UpdateFirmware_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_UpdateFirmware_Response
 */        
struct Ts_TUNSDK_On_UpdateFirmware_Response_Handle
{
private:
    Ts_TUNSDK_On_UpdateFirmware_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_UpdateFirmware_Response_Handle(Ts_TUNSDK_On_UpdateFirmware_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_UpdateFirmwareProgress_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_UpdateFirmwareProgress_Notification
 */
struct Ts_TUNSDK_On_UpdateFirmwareProgress_Notification_Handle
{
    /**
     *@brief extract chipset out of Ts_TUNSDK_On_UpdateFirmwareProgress_Notification
     *@returns member "chipset" : which type of chipset is being flashed
     */
    Te_tunsdk_chipset chipset(void) const;
    /**
     *@brief extract progress out of Ts_TUNSDK_On_UpdateFirmwareProgress_Notification
     *@returns member "progress" : an overall progress indicator
     */
    uint32_t progress(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_UpdateFirmwareProgress_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_UpdateFirmwareProgress_Notification_Handle(const Ts_TUNSDK_On_UpdateFirmwareProgress_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_HdTpegData_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_HdTpegData_Notification
 */
struct Ts_TUNSDK_On_HdTpegData_Notification_Handle
{
    /**
     *@brief extract freqKHz out of Ts_TUNSDK_On_HdTpegData_Notification
     *@returns member "freqKHz" : the frequency in kHz
     */
    uint32_t freqKHz(void) const;
    /**
     *@brief extract service out of Ts_TUNSDK_On_HdTpegData_Notification
     *@returns member "service" : the service the data is coming from
     */
    Te_tunsdk_hdtpeg_service service(void) const;
    /**
     *@brief extract sequenceNumber out of Ts_TUNSDK_On_HdTpegData_Notification
     *@returns member "sequenceNumber" : AAS packet sequence number
     */
    uint16_t sequenceNumber(void) const;
    /**
     *@brief extract packet out of Ts_TUNSDK_On_HdTpegData_Notification
     *@returns member "packet" : the actual hd tpeg data
     */
    Ts_tunsdk_hdtpeg_packet_Handle packet(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_HdTpegData_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_HdTpegData_Notification_Handle(const Ts_TUNSDK_On_HdTpegData_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_SetHdTpeg_Response;

/**@cond PRIVATE*/
/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_SetHdTpeg_Response
 */        
struct Ts_TUNSDK_On_SetHdTpeg_Response_Handle
{
private:
    Ts_TUNSDK_On_SetHdTpeg_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_SetHdTpeg_Response_Handle(Ts_TUNSDK_On_SetHdTpeg_Response*pData) : m_pData(pData){}
};
/**@endcond*/

struct Ts_TUNSDK_On_HdTpegChannel_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_HdTpegChannel_Notification
 */
struct Ts_TUNSDK_On_HdTpegChannel_Notification_Handle
{
    /**
     *@brief extract freqKHz out of Ts_TUNSDK_On_HdTpegChannel_Notification
     *@returns member "freqKHz" : the frequency
     */
    uint32_t freqKHz(void) const;
    /**
     *@brief extract hd_tpeg_service out of Ts_TUNSDK_On_HdTpegChannel_Notification
     *@returns member "hd_tpeg_service" : HD TPEG service id
     */
    Te_tunsdk_hdtpeg_service hd_tpeg_service(void) const;
    /**
     *@brief extract channel_state out of Ts_TUNSDK_On_HdTpegChannel_Notification
     *@returns member "channel_state" : indicated whether currently data is being received or a new station is being searched.
     */
    Te_tunsdk_hdtpeg_channel_state channel_state(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_HdTpegChannel_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_HdTpegChannel_Notification_Handle(const Ts_TUNSDK_On_HdTpegChannel_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_TplSend_Response;

/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_TplSend_Response
 */        
struct Ts_TUNSDK_On_TplSend_Response_Handle
{
    /**
     *@brief extract responses out of Ts_TUNSDK_On_TplSend_Response
     *@returns member "responses" : the data received from TPL
     */
    Ts_tunsdk_rawBuf responses(void) const;
private:
    Ts_TUNSDK_On_TplSend_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_TplSend_Response_Handle(Ts_TUNSDK_On_TplSend_Response*pData) : m_pData(pData){}
};

struct Ts_TUNSDK_On_AmFmReceptionQuality_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_AmFmReceptionQuality_Notification
 */
struct Ts_TUNSDK_On_AmFmReceptionQuality_Notification_Handle
{
    /**
     *@brief extract quality out of Ts_TUNSDK_On_AmFmReceptionQuality_Notification
     *@returns member "quality" : The quality
     */
    uint8_t quality(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_AmFmReceptionQuality_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_AmFmReceptionQuality_Notification_Handle(const Ts_TUNSDK_On_AmFmReceptionQuality_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_DabAudioQuality_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_DabAudioQuality_Notification
 */
struct Ts_TUNSDK_On_DabAudioQuality_Notification_Handle
{
    /**
     *@brief extract quality out of Ts_TUNSDK_On_DabAudioQuality_Notification
     *@returns member "quality" : The quality
     */
    uint8_t quality(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_DabAudioQuality_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_DabAudioQuality_Notification_Handle(const Ts_TUNSDK_On_DabAudioQuality_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_HdEmergencyWarningAlert_Notification;

/**
 *@brief opaque type to extract data out of a notification during callback to TUNSDK_On_HdEmergencyWarningAlert_Notification
 */
struct Ts_TUNSDK_On_HdEmergencyWarningAlert_Notification_Handle
{
    /**
     *@brief extract alert out of Ts_TUNSDK_On_HdEmergencyWarningAlert_Notification
     *@returns member "alert" : alert data that was received
     */
    Ts_tunsdk_hd_emergency_alert_Handle alert(void) const;
/**@cond PRIVATE*/
private:
    const Ts_TUNSDK_On_HdEmergencyWarningAlert_Notification* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */            
    explicit Ts_TUNSDK_On_HdEmergencyWarningAlert_Notification_Handle(const Ts_TUNSDK_On_HdEmergencyWarningAlert_Notification*pData) : m_pData(pData){}
/**@endcond*/
};  

struct Ts_TUNSDK_On_GetImage_Response;

/**
 *@brief opaque type to extract data out of a response during callback to TUNSDK_On_GetImage_Response
 */        
struct Ts_TUNSDK_On_GetImage_Response_Handle
{
    /**
     *@brief extract image out of Ts_TUNSDK_On_GetImage_Response
     *@returns member "image" : the image
     */
    Ts_tunsdk_image_Handle image(void) const;
    /**
     *@brief extract imageIdOut out of Ts_TUNSDK_On_GetImage_Response
     *@returns member "imageIdOut" : imageId as received in your request
     */
    uint32_t imageIdOut(void) const;
private:
    Ts_TUNSDK_On_GetImage_Response* m_pData; /**<pointer to private data, do not access*/
public:
    /**
     *@brief constructor
     *@param pData pointer to the actual data to be represented by this object
     */
    explicit Ts_TUNSDK_On_GetImage_Response_Handle(Ts_TUNSDK_On_GetImage_Response*pData) : m_pData(pData){}
};




/**
 *@brief This class is the base class that any client to TUNSDK should inherit from. You are required
 *  to override a fixed set of callbacks / virtual functions to handle reception of TUNSDK messages
 * the class itself provides APIs to send requests to TUNSDK.
 */
class CTUNSDK_ClientBase
{
private:
    CTUNSDK_ApiImpl* m_pImpl; /**<private access to the actual implementation*/
    
public:
    CTUNSDK_ClientBase(void);
    virtual ~CTUNSDK_ClientBase(void);
    

/**
 *@brief This callback will be called when your connection status has changed
 *@param connected true if connection was established, false if it was lost
 */
virtual void TUNSDK_On_Connected(bool connected) = 0;

    
/**
 *@brief Call this API to register to and from observers.
 *@param observerID the observer id to register for. Note the special value #TUNSDK_OBSERVER_ID_ALL
 *@param reg true if you want to be notified, false otherwise
 *@return indicates whether registering observers succeeded (it may fail if TUNSDK was or has become unavailable
 */
Te_tunsdk_status TUNSDK_RegisterForObserver(Te_tunsdk_observer observerID, bool reg);

/**
 *@brief Starts the TUNSDK. 
 *@param transId transaction ID to keep track of response messages (it is not used by Start but will be returned to you with the response message)
 *@param start_mode This parameter is currently not in use. It is intended to distinguish different "start types". Currently, there's only one start type. Please use the value "0". 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_Start_Response
 *@par Detailed description
 *This service starts the TUNSDK. You can call it after a previous stop has completed, during an ongoing stop or during an ongoing start. In other words, you can always call it.
 */
 
Te_tunsdk_status TUNSDK_Start(tunsdk_transid_t transId, Te_tunsdk_start_mode start_mode);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_Start has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : This service will "always" succeed. If start does not succeed, a critical error is generated and no response is returned.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_Start_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_Start_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Stops the TUNSDK 
 *@param transId transaction ID to keep track of response messages (it is not used by Stop but will be returned to you with the response message)
 *@param stop_mode This parameter is currently not in use. It is intended to distinguish different "stop types". Currently, there's only one stop type. Please use #TUNSDK_STOP_MODE_NORMAL. 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_Stop_Response
 *@par Detailed description
 *This service stops the TUNSDK. You can call it after a previous start has completed, during an ongoing stop or during an ongoing start. In other words, you can always call it.
 */
 
Te_tunsdk_status TUNSDK_Stop(tunsdk_transid_t transId, Te_tunsdk_stop_mode stop_mode);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_Stop has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : This service will always succeed. If it does not succeed, a critical error is generated.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_Stop_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_Stop_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Informs Availability of TUNSDK- This callback will be called when a notification "Availability" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *When available, TUNSDK can handle all kinds of tuning commands in addition to life cycle commands . When not available, TUNSDK can only handle life cycle commands "start" and "stop".
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_Availability_Notification_Handle::available
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_Availability_Notification(Ts_TUNSDK_On_Availability_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Requests availability information from TUNSDK 
 *@param transId transaction ID to keep track of response messages (it is not used by GetAvailability but will be returned to you with the response message)
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_GetAvailability_Response
 *@par Detailed description
 *Use this service to request availability information from TUNSDK. This is recommended in case a client cannot be sure whether or not TUNSDK has already been started. This may be due to e.g. HMI not launching tunsdk_app, but a 3rd party e.g. a SystemManager
 */
 
Te_tunsdk_status TUNSDK_GetAvailability(tunsdk_transid_t transId);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_GetAvailability has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : The response carries valid availability data. This service always succeeds.
      
 *@par Detailed description
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_GetAvailability_Response_Handle::available
 *@post When this callback returns, outData will become invalid, take a deep copy the data during the callback
 */
virtual void TUNSDK_On_GetAvailability_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_GetAvailability_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief This service allows the selection of a mode, e.g. FM mode or DAB mode. 
 *@param transId transaction ID to keep track of response messages (it is not used by SetMode but will be returned to you with the response message)
 *@param mode the desired mode 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_SetMode_Response
 *@par Detailed description
 *TUNSDK can be set to different modes.   
                   TUNSDK is in only one mode at any given time. Most modes are associated with one radio band, but not all. E.g. @ref TUNSDK_MODE_BACKGROUND is a mode in which TUNSDK shall perform background tasks like TP monitoring.
                   After Startup, TUNSDK is in "no mode at all". Typically, it is recommended to set TUNSDK into either background mode (if TUNSDK was not LSM) or the appropriate TUNSDK LSM. TUNSDK does not remember the last mode. It only remembers LSM stations for all modes.
                   After the mode change was performed, the LSM of that mode has been tuned and mode specific settings have been applied. E.g. TUNSDK keeps distinct settings for #TUNSDK_SETTING_AM_HD vs. #TUNSDK_SETTING_FM_HD
 */
 
Te_tunsdk_status TUNSDK_SetMode(tunsdk_transid_t transId, Te_tunsdk_mode mode);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_SetMode has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Will be returned if setting mode succeeded. This will be the case during normal runtime situations
      
     #TUNSDK_RESULT_CANCELLED : This can happen e.g. if TUNSDK is stopped during setting mode or when another SetMode is requested when the previous one has not completed yet.
      
     #TUNSDK_RESULT_FAIL : Setting mode failed. This should not happen normally.
      
     #TUNSDK_RESULT_NSUPPORTED : In case you are trying to set a mode which is not supported by the configuration. E.g. set mode to DAB in a North America variant with no DAB hardware
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_SetMode_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_SetMode_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Select an AM or FM station that reqires a mode change. 
 *@param transId transaction ID to keep track of response messages (it is not used by SetModeStationAmFm but will be returned to you with the response message)
 *@param tunBand the band, either FM or AM MW 
 *@param freqKHz the frequency to be tuned. 
 *@param pi the pi code to be tuned. or 0xFFFF0000 in case no PI 
 *@param mcast the multicast value, only used in HD Radio. Use 0 for MPS stations and 1-7 for respective SPS stations. use 0 in case of HD off. Use 0 if you do not know ehich SPS are available 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_SetModeStationAmFm_Response
 *@par Detailed description
 *This service allows to change mode to AM/FM but overriding the LSM station, saving time by avoiding multiple tunings in this scenario.
 */
 
Te_tunsdk_status TUNSDK_SetModeStationAmFm(tunsdk_transid_t transId, Te_tunsdk_amfm_band tunBand, uint32_t freqKHz, uint32_t pi, uint8_t mcast);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_SetModeStationAmFm has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Selecting the station succeeded.
      
     #TUNSDK_RESULT_CANCELLED : The operation was interrupted due to another command coming in in the meantime.
      
     #TUNSDK_RESULT_FAIL : The tuning failed. Please check your parameters.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_SetModeStationAmFm_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_SetModeStationAmFm_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Change mode to DAB selecting the given station. 
 *@param transId transaction ID to keep track of response messages (it is not used by SetModeStationDab but will be returned to you with the response message)
 *@param sid service id 
 *@param scids service component id within service 
 *@param eid ensemble id 
 *@param ecc extended country code 
 *@param freqKHz fallback frequency in kHz 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_SetModeStationDab_Response
 *@par Detailed description
 *This service allows to change mode to DAB but overriding the LSM station, saving time by avoiding multiple tunings in this scenario.
 */
 
Te_tunsdk_status TUNSDK_SetModeStationDab(tunsdk_transid_t transId, uint32_t sid, uint8_t scids, uint16_t eid, uint8_t ecc, uint32_t freqKHz);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_SetModeStationDab has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Selecting the station succeeded.
      
     #TUNSDK_RESULT_CANCELLED : The operation was interrupted due to another tuning command coming in in the meantime.
      
     #TUNSDK_RESULT_FAIL : The tuning failed. Please check your parameters.
      
     #TUNSDK_RESULT_NSUPPORTED : In case you are trying to set a mode which is not supported by the configuration. E.g. set mode to DAB in a North America variant with no DAB hardware
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_SetModeStationDab_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_SetModeStationDab_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Informs about change of selected station. - This callback will be called when a notification "SelectedStation" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *This observer is the most regularly sent observer of TUNSDK. It notifies the client about any change of the current station, e.g. by tuning command, 
                   AF following, scrolling PS, PTY change, reception loss change in radio state etc.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_SelectedStation_Notification_Handle::station
 *- #Ts_TUNSDK_On_SelectedStation_Notification_Handle::radioState
 *- #Ts_TUNSDK_On_SelectedStation_Notification_Handle::currStlIndex
 *- #Ts_TUNSDK_On_SelectedStation_Notification_Handle::stationMetaData
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_SelectedStation_Notification(Ts_TUNSDK_On_SelectedStation_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Select an AM or FM station. 
 *@param transId transaction ID to keep track of response messages (it is not used by SelectStationAmFm but will be returned to you with the response message)
 *@param tunBand the band, either FM or AM MW 
 *@param freqKHz the frequency to be tuned. 
 *@param pi the pi code to be tuned. 
 *@param mcast the multicast value, only used in HD Radio. Use 0 for MPS stations and 1-7 for respective SPS stations 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_SelectStationAmFm_Response
 *@par Detailed description
 *This service allows to tune a station from FM or AM band using its primary tuning parameters.
                  For AM stations, the behavior is influenced by TUNSDK's support for HD.
                  The AM frequency is tuned. If the requested frequency is not inside the configured grid, TUNSDK will tune the frequency closest to the one requested. In case HD Radio is supported in TUNSDK, TUNSDK will enable the HD decoding for that frequency.
                  For FM stations, the behavior is influenced by the #TUNSDK_SETTING_FM_HD as well as the pi ignore switch, RDS switch and TUNSDK's support for HD.
                  If HD is supported, TUNSDK will tune the requested frequency. If the frequency is not matching the frequency grid, the closest matching frequency will be tuned. TUNSDK will enable the HD decoding for that frequency.
                  If HD is NOT supported, RDS is on and PI ignore is off, TUNSDK will try to tune a station matching the PI code. Based on its learn memory contents, it will select the best frequency for that PI code.
                  If either PI ignore is on or RDS is OFF, TUNSDK will tune only based on the frequency. If the frequency is not matching the frequency grid, the closest matching frequency will be tuned.
 */
 
Te_tunsdk_status TUNSDK_SelectStationAmFm(tunsdk_transid_t transId, Te_tunsdk_amfm_band tunBand, uint32_t freqKHz, uint32_t pi, uint8_t mcast);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_SelectStationAmFm has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Selecting the station succeeded.
      
     #TUNSDK_RESULT_CANCELLED : The operation was interrupted due to another tuning command coming in in the meantime.
      
     #TUNSDK_RESULT_FAIL : The tuning failed. Please check your parameters.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_SelectStationAmFm_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_SelectStationAmFm_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Select a DAB station in DAB mode based on the given parameters. 
 *@param transId transaction ID to keep track of response messages (it is not used by SelectStationDab but will be returned to you with the response message)
 *@param sid the service id. A sid == 0 is considered invalid 
 *@param scids service component id within service, 0 for primary service 
 *@param eid ensemble id. An eid == 0 is considered invalid 
 *@param ecc extended contry code. An ecc == 0 is considered invalid 
 *@param freqKHz fallback frequency in kHz 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_SelectStationDab_Response
 *@par Detailed description
 *This service will select a DAB station per its primary tuning information sid, scids, eid, ecc. 
                   The purpose of this API is mostly to select stations from the station list. For best results, provide all parameters from the station list to this API.
                   If a valid sid is provided, then TUNSDK will try to select the requested service.
                   To select the service, it will first tune based on the parameters eid+ecc or freqKHz.
                   If a valid eid is provided, tuning will happen based on the eid+ecc. Note that the ecc has no effect most of the time since it is only used for tuning in case multiple ensembles using the same eid are present in 
                   TUNSDK's persistent learn memory.
                   If an invalid eid is provided, tuning will happen based on the frequency. The frequency should be contained inside TUNSDKs DAB frequency grid. If the frequency does not match the frequency grid, the default frequency (5A) is tuned.
                   In a second use case, this API can be used to perform tuning based on frequency, e.g. the user inputs a frequency (or channel label, from which HMI will deduce a frequency) into HMI. 
                   In all cases, after tuning has completed (independent of success or failure), DAB linking is activated in case #TUNSDK_SETTING_DAB_AF is configured to be on. 
 */
 
Te_tunsdk_status TUNSDK_SelectStationDab(tunsdk_transid_t transId, uint32_t sid, uint8_t scids, uint16_t eid, uint8_t ecc, uint32_t freqKHz);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_SelectStationDab has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Selecting the station succeeded.
      
     #TUNSDK_RESULT_CANCELLED : The operation was interrupted due to another tuning command coming in in the meantime.
      
     #TUNSDK_RESULT_FAIL : The tuning failed. Please check your parameters.
      
     #TUNSDK_RESULT_NSUPPORTED : In case DAB is not supported by the configuration
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_SelectStationDab_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_SelectStationDab_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Tunes "up" or "down" based on the notion of "steps". 
 *@param transId transaction ID to keep track of response messages (it is not used by TuneUpDown but will be returned to you with the response message)
 *@param direction the direction into which to tune 
 *@param step the number of steps to tune 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_TuneUpDown_Response
 *@par Detailed description
 *Tuning happens from the "current station" as perceived by TUNSDK. If this service is called in quick succession, the previous calls will return with #TUNSDK_RESULT_CANCELLED. 
                   As long as TuneUpDown gets called "back to back", the steps and directions will get summed up by TUNSDK and executed as fast as possible. 
                   E.g. you are tuned to 98,4 MHz and tune 5 steps up, then 4 steps down and then 2 steps up, you will end 
                   up at 5-4+2 = 3 ->98,7 MHz assuming a 100kHz tuning grid for FM. The client shall not make assumptions about the resulting frequency of TuneUpDown. If you calculate the resulting station, use SelectStation instead.
 */
 
Te_tunsdk_status TUNSDK_TuneUpDown(tunsdk_transid_t transId, Te_tunsdk_direction direction, uint32_t step);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_TuneUpDown has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Tuning has succeeded.
      
     #TUNSDK_RESULT_CANCELLED : Tune up down was cancelled. One typical reason would be a quick succession of TuneUpDown commands that will cancel each other (see description), so that only some commands will be executed.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_TuneUpDown_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_TuneUpDown_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Request a seek in the current mode. 
 *@param transId transaction ID to keep track of response messages (it is not used by Seek but will be returned to you with the response message)
 *@param direction the direction in which to seek 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_Seek_Response
 *@par Detailed description
 *TUNSDK will search towards the indicated direction for "good" quality stations. Each station being checked is indicated as selected station during the process.
                 This operation can take significant amounts of time (e.g. 30 seconds), so it is advised to indicate progress to the user. 
                   When TUNSDK first finds a "good enogh" stations the seek "stops" on that station.
 */
 
Te_tunsdk_status TUNSDK_Seek(tunsdk_transid_t transId, Te_tunsdk_direction direction);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_Seek has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Seek completed successfully.
      
     #TUNSDK_RESULT_CANCELLED : Seek was cancelled.
      
     #TUNSDK_RESULT_FAIL : Please check your parameters.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_Seek_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_Seek_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Service for requesting a seek that does NOT stop on any frequency, even if it has good quality. 
 *@param transId transaction ID to keep track of response messages (it is not used by SeekNonStop but will be returned to you with the response message)
 *@param direction the direction into which to seek 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_SeekNonStop_Response
 *@par Detailed description
 *This service will seek, but not stop on any frequency. This is typically triggered by long pressing a seek button. The non-stop seek transitions into a normal seek when the user releases the button.
 */
 
Te_tunsdk_status TUNSDK_SeekNonStop(tunsdk_transid_t transId, Te_tunsdk_direction direction);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_SeekNonStop has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_CANCELLED : In case the Non-Stop seek was cancelled. Note that this service will never return #TUNSDK_RESULT_OK, since it never completes
      
     #TUNSDK_RESULT_FAIL : Please check your parameters.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_SeekNonStop_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_SeekNonStop_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Request specialized DAB Seek cases. 
 *@param transId transaction ID to keep track of response messages (it is not used by SeekDab but will be returned to you with the response message)
 *@param direction the direction into which to seek 
 *@param seek_type the seek type. This will influence the skipping behavior. 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_SeekDab_Response
 *@par Detailed description
 *In DAB, multiple variants of Seek are defined. This API allows you to select the one appropriate for the given use case. See the enum definitions for details.
 */
 
Te_tunsdk_status TUNSDK_SeekDab(tunsdk_transid_t transId, Te_tunsdk_direction direction, Te_tunsdk_dab_seek_type seek_type);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_SeekDab has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Seek has completed successfully.
      
     #TUNSDK_RESULT_CANCELLED : Seek was cancelled by another command.
      
     #TUNSDK_RESULT_FAIL : Please check your parameters.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_SeekDab_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_SeekDab_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Stop a ongoing seek in place. 
 *@param transId transaction ID to keep track of response messages (it is not used by SeekStop but will be returned to you with the response message)
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_SeekStop_Response
 *@par Detailed description
 *While seek is ongoing, if this service is requested the ongoing seek will be stopped at the current tuned frequency.
                   E.g. consider TUNSDK is seeking through frequencies  90.5, 90.7, 90.9. When this request is received now, then the seek stops at 90.9.
                   if you want to return to the LSM station instead, the seek must be "cancelled". Not that due to asynchronous communication, it may be
                   that at the time of sending the request, the seek is ongoing, but at the time of reception, the seek already stopped on some frequency.
 */
 
Te_tunsdk_status TUNSDK_SeekStop(tunsdk_transid_t transId);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_SeekStop has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Seek has been stopped.
      
     #TUNSDK_RESULT_FAIL : Seek was not stopped. This will happen in case no seek is ongoing.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_SeekStop_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_SeekStop_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Cancel an ongoing seek, restoring the last situation that was valid before starting the Seek. 
 *@param transId transaction ID to keep track of response messages (it is not used by SeekCancel but will be returned to you with the response message)
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_SeekCancel_Response
 *@par Detailed description
 *This is identical to stopping the seek, only that the LSM is restored.
 */
 
Te_tunsdk_status TUNSDK_SeekCancel(tunsdk_transid_t transId);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_SeekCancel has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Seek has been cancelled.
      
     #TUNSDK_RESULT_FAIL : Seek was not cancelled. This will happen in case no seek is ongoing.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_SeekCancel_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_SeekCancel_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Informs about a change in AM station list- This callback will be called when a notification "AmStationList" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *Provides a station list on change and on request.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_AmStationList_Notification_Handle::stationList
 *- #Ts_TUNSDK_On_AmStationList_Notification_Handle::currentStationIndex
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_AmStationList_Notification(Ts_TUNSDK_On_AmStationList_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Informs about a change in FM station list- This callback will be called when a notification "FmStationList" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *Provides a station list on change and on request.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_FmStationList_Notification_Handle::stationList
 *- #Ts_TUNSDK_On_FmStationList_Notification_Handle::currentStationIndex
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_FmStationList_Notification(Ts_TUNSDK_On_FmStationList_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Informs about a change in DAB station list- This callback will be called when a notification "DabStationList" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *Provides a station list on change and on request.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_DabStationList_Notification_Handle::stationList
 *- #Ts_TUNSDK_On_DabStationList_Notification_Handle::currentStationIndex
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_DabStationList_Notification(Ts_TUNSDK_On_DabStationList_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Request an explicit update of station list 
 *@param transId transaction ID to keep track of response messages (it is not used by UpdateStationList but will be returned to you with the response message)
 *@param mode the mode for which the update shall be performed. Note that giving any mode different from the current mode will result in a mode change in TUNSDK. 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_UpdateStationList_Response
 *@par Detailed description
 *This allows a user to update a station list forcefully. Update takes place using all available tuners. 
                  After update has completed, an updated station list is available.
 */
 
Te_tunsdk_status TUNSDK_UpdateStationList(tunsdk_transid_t transId, Te_tunsdk_mode mode);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_UpdateStationList has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Updating the station list succeeded.
      
     #TUNSDK_RESULT_CANCELLED : The update was cancelled due to another request.
      
     #TUNSDK_RESULT_FAIL : The update failed.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_UpdateStationList_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_UpdateStationList_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Cancel an ongoing station list update and restore the LSM. If no update is ongoing, this has no effect. 
 *@param transId transaction ID to keep track of response messages (it is not used by UpdateStationListCancel but will be returned to you with the response message)
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_UpdateStationListCancel_Response
 *@par Detailed description
 *Cancel an ongoing station list update and restore the LSM. If no update is ongoing, this has no effect.
 */
 
Te_tunsdk_status TUNSDK_UpdateStationListCancel(tunsdk_transid_t transId);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_UpdateStationListCancel has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Canceling succeeded.
      
     #TUNSDK_RESULT_FAIL : Canceling failed. Please check your parameters.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_UpdateStationListCancel_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_UpdateStationListCancel_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief This service allows to configure user settings. 
 *@param transId transaction ID to keep track of response messages (it is not used by ConfigureSetting but will be returned to you with the response message)
 *@param setting the setting which needs to be changed 
 *@param value the value for the new setting. All settings are treated as unsigned 32 bit in this interface. Please see #Ts_tunsdk_settings_Handle for the "real" types to be used (you can also check out the sample code). 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_ConfigureSetting_Response
 *@par Detailed description
 *Call this service to change user settings like RDS, TP, etc. It is possible to call this service in quick succession to apply a list of settings. TUNSDK will process all of them. If the same
                   setting is changed more than once before it can be processed, the latest value of the setting is applied and the previous request(s) are returned with result code #TUNSDK_RESULT_CANCELLED
 */
 
Te_tunsdk_status TUNSDK_ConfigureSetting(tunsdk_transid_t transId, Te_tunsdk_setting setting, int32_t value);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_ConfigureSetting has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Changing the setting succeeded.
      
     #TUNSDK_RESULT_CANCELLED : While changing the setting, the same setting was changed again. The first setting change is then cancelled in favor of the second.
      
     #TUNSDK_RESULT_FAIL : The parameters were not OK.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_ConfigureSetting_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_ConfigureSetting_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Informs clients about the user settings currently in place.- This callback will be called when a notification "ConfiguredSettings" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *Please see Ts_tunsdk_settings for the meaning of individual parameters.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_ConfiguredSettings_Notification_Handle::settings
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_ConfiguredSettings_Notification(Ts_TUNSDK_On_ConfiguredSettings_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief This service is used to get user configuration parameters from TUNSDK. 
 *@param transId transaction ID to keep track of response messages (it is not used by GetConfiguredSettings but will be returned to you with the response message)
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_GetConfiguredSettings_Response
 *@par Detailed description
 *This service is used to get user configuration parameters from TUNSDK. The ConfiguredSettings notification will be raised.
 */
 
Te_tunsdk_status TUNSDK_GetConfiguredSettings(tunsdk_transid_t transId);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_GetConfiguredSettings has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Getting settings succeeded.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_GetConfiguredSettings_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_GetConfiguredSettings_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief This service is used to request a station list for a specific mode. 
 *@param transId transaction ID to keep track of response messages (it is not used by GetStationList but will be returned to you with the response message)
 *@param mode The mode for which a staiton list notification shall be raised. 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_GetStationList_Response
 *@par Detailed description
 *This service is used to request a station list for a specific mode. It is recommended to only request one station list at a time. 
                 The normal station list notification will be raised. This interface may be useful when connecting to TUNSDK after it was already started. During normal operation, it is not needed since station list will be notified on change.
 */
 
Te_tunsdk_status TUNSDK_GetStationList(tunsdk_transid_t transId, Te_tunsdk_mode mode);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_GetStationList has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Getting settings succeeded.
      
     #TUNSDK_RESULT_FAIL : incorrect parameters
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_GetStationList_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_GetStationList_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Reset TUNSDKs persistency to default. Various levels of reset are supported based on value of resetType. 
 *@param transId transaction ID to keep track of response messages (it is not used by ResetFactoryDefault but will be returned to you with the response message)
 *@param resetType Defines the "level of reset", please see the type definition. 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_ResetFactoryDefault_Response
 *@par Detailed description
 *This will reset all user settings to their defaults.
 */
 
Te_tunsdk_status TUNSDK_ResetFactoryDefault(tunsdk_transid_t transId, Te_tunsdk_factory_reset_type resetType);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_ResetFactoryDefault has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Reset succeeded.
      
     #TUNSDK_RESULT_FAIL : Reset failed. Interaction with persistency returned negative results.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_ResetFactoryDefault_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_ResetFactoryDefault_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Informs the TP status of the system.- This callback will be called when a notification "TPStatus" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *The TP status indicates whether the user can expect Traffic Announcements in regular intervals. 
                   The TP status will be TUNSDK_TP_STATUS_AVAILABLE in case a TP station is available with sufficient reception and TUNSDK_TP_STATUS_UNAVAILABLE
                   otherwise. For finding a TP station the respective setting is considered (that can enable TP from FM and/or DAB). TUNSDK will take appropriate measures
                   to keep the TP station stable and by this prevent user confusion. When a TP station has been selected, a hysteresis is used to prevent undue change of TP station due to short
                   reception interruptions. ON the other hand, when reception is unstable for extended periods of time, TUNSDK will select a new TP station automatically.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_TPStatus_Notification_Handle::tpStatusData
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_TPStatus_Notification(Ts_TUNSDK_On_TPStatus_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Indicates that an announcement was discovered during background scanning or by FM EON.- This callback will be called when a notification "Announcement_Background" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *Only traffic announcements or alarms will be reported from the background. In case if FM EON, this notification is only triggered 
                   in case the EON station could be confirmed to be receivable (using background tuner), its quality is estimated as sufficient, the pi code confirmed 
                   to match and the announcement actually is happening (TP=TA=1).
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_Announcement_Background_Notification_Handle::station
 *- #Ts_TUNSDK_On_Announcement_Background_Notification_Handle::annoType
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_Announcement_Background_Notification(Ts_TUNSDK_On_Announcement_Background_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Indicates the start of an announcement.- This callback will be called when a notification "Announcement_Start" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *Indicates the start of an announcement. May also occur during an announcement to indicate that another announcement is available.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_Announcement_Start_Notification_Handle::station
 *- #Ts_TUNSDK_On_Announcement_Start_Notification_Handle::annoType
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_Announcement_Start_Notification(Ts_TUNSDK_On_Announcement_Start_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Indicates the end of an announcement.- This callback will be called when a notification "Announcement_End" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *Indicates the end of an announcement.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_Announcement_End_Notification_Handle::station
 *- #Ts_TUNSDK_On_Announcement_End_Notification_Handle::annoType
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_Announcement_End_Notification(Ts_TUNSDK_On_Announcement_End_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Cancel the currently ongoing announcement. 
 *@param transId transaction ID to keep track of response messages (it is not used by AnnouncementCancel but will be returned to you with the response message)
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_AnnouncementCancel_Response
 *@par Detailed description
 *Cancel the currently ongoing announcement.  If other (lower priority) announcements are still ongoing, they will get activated.
 */
 
Te_tunsdk_status TUNSDK_AnnouncementCancel(tunsdk_transid_t transId);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_AnnouncementCancel has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : In case the cancel succeeded.
      
     #TUNSDK_RESULT_FAIL : In case it did not succeed.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_AnnouncementCancel_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_AnnouncementCancel_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Informs the change in reception status during DAB mode.- This callback will be called when a notification "DabAudioStatus" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *It is intended to be used to e.g. display a "DAB reception icon" as mute or FM link on the screen for the selected station. Also, it can serve as input for implementing "volume lock."
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_DabAudioStatus_Notification_Handle::dabAudioStatus
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_DabAudioStatus_Notification(Ts_TUNSDK_On_DabAudioStatus_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief This notification informs about change in audio status of an HD radio station.- This callback will be called when a notification "HdAudioStatus" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 * It is intended to be used to e.g. display a "HD reception icon" on the screen for the selected station. Also, it can serve as input for implementing "volume lock."
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_HdAudioStatus_Notification_Handle::tunable
 *- #Ts_TUNSDK_On_HdAudioStatus_Notification_Handle::hdAudioStatus
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_HdAudioStatus_Notification(Ts_TUNSDK_On_HdAudioStatus_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Select a TMC service for which TUNSDK shall provide TMC data.  
 *@param transId transaction ID to keep track of response messages (it is not used by AmFmSetTmcService but will be returned to you with the response message)
 *@param cc This is the country code for the service. This is <b>NOT</b> the extended country code. The country code is related to the pi code of FM stations. E.g. french stations have a country code of 0xF, so e.g. 0xF123 could be a French station. 
                Note that some countries share country codes, but they can be distinguished by location, i.e. no two neighbouring countries have the same country code. Note also that some countries use multiple 
                country codes, e.g. Germany uses 2 and United States uses even more. Please also check relevant specs for details. 
 *@param ltn The location table number as defined by RDS TMC spec (and received in #Ts_tunsdk_amfmhd_station_Handle) 
 *@param sid The sid as defined by RDS TMC spec (and received in #Ts_tunsdk_amfmhd_station_Handle) 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_AmFmSetTmcService_Response
 *@par Detailed description
 *This service selects a TMC service to be followed by TUNSDK. TUNSDK will then follow this service with high priority.
                   Call this service with all parameters set as 0 to disable TMC data reception.
                   It is recommended that the choice is based on the station list provided by #Ts_tunsdk_fm_station_list_Handle
                   The client should filter the list by the sid, ltn, cc combinations are known to it. 
                   In addition, it should consider the quality of the stations provided.
                   It is recommended to apply a hysteresis to avoid switching selections too often, since every switch will cost tuner time and too much switching will reduce effective sata rate a lot.
                   If available on the tuned station, TUNSDK will provide the data from the listened tuner. If not, TUNSDK will use a background tuner for providing the data.
                   TUNSDK will switch stations as it finds appropriate. In detail, it will: 
                   "AF switch" to another frequency with same PI (e.g. d001 88.1 MHz -> d001 88.2MHz)
                   "AF switch" to another frequency with different PI (e.g. d001 88.1 MHz -> d002 88.2MHz)
                   Those switches are only done when TUNSDK can successfully confirm the TMC service is available on the new station. 
                   Whenever possible, TUNSDK will use the data tuner for other pusposes like station list update and similar. 
                   But note that providing TMC data makes the tuner very busy so that it is not available often for other background tasks.
                   This can especially be the case when using TMC pro stations. These stations tend to send more TMC data typically. 
                   Because of this, reliable TMC support in a device can only be provided in case of a data tuner is available specifically for that task (which means 3 tuners or more). These tuners do not have to be hardware tuners.
                   The service can be used anyway with any amount of tuners for convenient testing purposes in case of absence of other hardware.
                   This service allows for a special handling to balance TMC data vs background station list update. For this, the client can call this service repeatedly with same parameters.
                   While this is not required, this will tell TUNSDK to give some room for station list update. It is recommended to do this every 300 seconds. But, to give full priority to TMC, this call can be omitted also. This is a design decision to 
                   be taken by the client.
 */
 
Te_tunsdk_status TUNSDK_AmFmSetTmcService(tunsdk_transid_t transId, uint8_t cc, uint8_t ltn, uint8_t sid);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_AmFmSetTmcService has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : The selection is confirmed. Note that this does not mean the station is available or reception has started.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_AmFmSetTmcService_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_AmFmSetTmcService_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief This service is used to enable or disable TMC background scan. 
 *@param transId transaction ID to keep track of response messages (it is not used by AmFmSetTmcScan but will be returned to you with the response message)
 *@param on set to true to enable, false to disable 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_AmFmSetTmcScan_Response
 *@par Detailed description
 *This service is used to enable or disable TMC background scan. Do not enable it in case TMC is not needed at all. 
                   If TMC is not needed currently, but may be needed later (e.g. navigation inactive), it is recommended to keep this on because discovering TMC services may take long time.
                   As a rule of thump it is a good practice to decide on this value once during startup and not based on user preferences, but there may be exceptions.
 */
 
Te_tunsdk_status TUNSDK_AmFmSetTmcScan(tunsdk_transid_t transId, bool on);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_AmFmSetTmcScan has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : The new selection is confirmed.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_AmFmSetTmcScan_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_AmFmSetTmcScan_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Notifies the TMC channel information to interested clients. This does not contain actual TMC data, but meta data about the actual TMC source.- This callback will be called when a notification "AmFmTmcChannel" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *Notifies the TMC channel information to interested clients. This does not contain actual TMC data, but meta data about the actual TMC source. it can be used to polpulate detailed user interfaces or engineering items.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_AmFmTmcChannel_Notification_Handle::pi
 *- #Ts_TUNSDK_On_AmFmTmcChannel_Notification_Handle::freqKHz
 *- #Ts_TUNSDK_On_AmFmTmcChannel_Notification_Handle::channel
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_AmFmTmcChannel_Notification(Ts_TUNSDK_On_AmFmTmcChannel_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Notifies RDS 8A data as received from the selected TMC channel- This callback will be called when a notification "AmFmTmcMessage" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *Notifies 8A data as received from the selected TMC channel on air for the client to decode.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_AmFmTmcMessage_Notification_Handle::freqKHz
 *- #Ts_TUNSDK_On_AmFmTmcMessage_Notification_Handle::sid
 *- #Ts_TUNSDK_On_AmFmTmcMessage_Notification_Handle::ltn
 *- #Ts_TUNSDK_On_AmFmTmcMessage_Notification_Handle::block_a
 *- #Ts_TUNSDK_On_AmFmTmcMessage_Notification_Handle::block_b
 *- #Ts_TUNSDK_On_AmFmTmcMessage_Notification_Handle::block_c
 *- #Ts_TUNSDK_On_AmFmTmcMessage_Notification_Handle::block_d
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_AmFmTmcMessage_Notification(Ts_TUNSDK_On_AmFmTmcMessage_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Indicates the reception of a new slide- This callback will be called when a notification "Slideshow" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *When this notification is received, a new slide has been received and is provided to the client. Slides will not be maintained persistently by TUNSDK, 
                 so if the client does not take it "now", the slide may or may not return at a later time depending on broadcast behavior of the station. 
                 You can retrieve the image using #CTUNSDK_ClientBase::TUNSDK_GetImage
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_Slideshow_Notification_Handle::slide
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_Slideshow_Notification(Ts_TUNSDK_On_Slideshow_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Informs about the reception of a new DAB EPG file.- This callback will be called when a notification "DabEPG" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *this observer is notified in case new EPG has been received over DAB from the current selected station.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_DabEPG_Notification_Handle::epgData
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_DabEPG_Notification(Ts_TUNSDK_On_DabEPG_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Store a station persistently on a preset for later recall. All relevant tuning information will be persisted. 
 *@param transId transaction ID to keep track of response messages (it is not used by PresetStore but will be returned to you with the response message)
 *@param presetIndex the index in the preset list 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_PresetStore_Response
 *@par Detailed description
 *The information stored is different per band.
 */
 
Te_tunsdk_status TUNSDK_PresetStore(tunsdk_transid_t transId, uint8_t presetIndex);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_PresetStore has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : The preset has been stored.
      
     #TUNSDK_RESULT_FAIL : The preset could not be stored due to either input parameters are not valid or no "current station" is known to TUNSDK currently. This may be the case e.g. during manual station list update.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_PresetStore_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_PresetStore_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Notifies the preset list. The list will be updated on change and when explicitly requested.- This callback will be called when a notification "PresetList" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *Notifies the preset list. The list will be updated on change and when explicitly requested.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_PresetList_Notification_Handle::presetList
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_PresetList_Notification(Ts_TUNSDK_On_PresetList_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Get a preset list for the given mode. 
 *@param transId transaction ID to keep track of response messages (it is not used by PresetGetList but will be returned to you with the response message)
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_PresetGetList_Response
 *@par Detailed description
 *Note this will enforce the preset list notification to ALL clients that have registered for the notification.
 */
 
Te_tunsdk_status TUNSDK_PresetGetList(tunsdk_transid_t transId);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_PresetGetList has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : geting the list succeeded.
      
     #TUNSDK_RESULT_FAIL : The list could not be retrieved. Please check your parameters.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_PresetGetList_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_PresetGetList_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Recall a preset from persistent memory. 
 *@param transId transaction ID to keep track of response messages (it is not used by PresetRecall but will be returned to you with the response message)
 *@param presetIndex the index of the preset to clear 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_PresetRecall_Response
 *@par Detailed description
 *The preset will be recalled in case its band matches the current mode. If it does not, but is still a valid preset, then the LSM for the preset's band will be overwritten and a RequireModeChange will be raised. Then, the client is expected to initiate mode change to the mode indicated in that notification.
 */
 
Te_tunsdk_status TUNSDK_PresetRecall(tunsdk_transid_t transId, uint8_t presetIndex);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_PresetRecall has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Recalling the preset succeeded.
      
     #TUNSDK_RESULT_FAIL : The parameters provided are not good.
      
     #TUNSDK_RESULT_CANCELLED : The request was cancelled by another request.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_PresetRecall_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_PresetRecall_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief This informs about TUNSDK has detected a mode change should be performed.- This callback will be called when a notification "RequireModeChange" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *TUNSDK will trigger this notification when a preset is recalled that requires another mode. E.g. current mode is DAB, and a FM preset is recalled.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_RequireModeChange_Notification_Handle::requiredMode
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_RequireModeChange_Notification(Ts_TUNSDK_On_RequireModeChange_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Delete a preset from the preset list. 
 *@param transId transaction ID to keep track of response messages (it is not used by PresetClear but will be returned to you with the response message)
 *@param presetIndex the index of the preset to clear 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_PresetClear_Response
 *@par Detailed description
 *Deletes the preset, essentially returning it to its default value.
 */
 
Te_tunsdk_status TUNSDK_PresetClear(tunsdk_transid_t transId, uint8_t presetIndex);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_PresetClear has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Clearing the preset succeeded.
      
     #TUNSDK_RESULT_FAIL : The parameters provided are not good.
      
     #TUNSDK_RESULT_CANCELLED : The request was cancelled by another request.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_PresetClear_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_PresetClear_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Move a preset within the preset "drag and drop style". 
 *@param transId transaction ID to keep track of response messages (it is not used by PresetMove but will be returned to you with the response message)
 *@param presetIndexDst the destination index of the move 
 *@param presetIndexSrc the source index of the move 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_PresetMove_Response
 *@par Detailed description
 *The preset is moved from destination to source. After the move, the preset data previosly found in the presetIndexSrc is now found in the presetIndexDst. 
                   All other presets have been shifted accordingly. No preset is deleted/overwritten. E.g. from 0 based A B C D if you perform a move(dst=3,src=1), the result will be 
                   A C D B. If you do a move (dst=0,src=3) instead, the result will be D A B C. So the moved preset ends up exaclty in the spot specified, if it came from a lower index 
                   preset, the part of the list between the src and the dst is shifted to the left to accommodate, if it came from a higher index the part of the list between the src and the dst is shifted to the right to accommodate.
                   While this sounds complicated, it is not. In fact this behavior matches most lists you'd see in today's HMIs like Smart Phones etc.
 */
 
Te_tunsdk_status TUNSDK_PresetMove(tunsdk_transid_t transId, uint8_t presetIndexDst, uint8_t presetIndexSrc);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_PresetMove has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Clearing the preset succeeded.
      
     #TUNSDK_RESULT_FAIL : The parameters provided are not good.
      
     #TUNSDK_RESULT_CANCELLED : The request was cancelled by another request.
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_PresetMove_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_PresetMove_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Update the firmware of the mercury chipset 
 *@param transId transaction ID to keep track of response messages (it is not used by UpdateFirmware but will be returned to you with the response message)
 *@param chipset selection which type of chipset to flash 
 *@param secondaryBootLoader path to the secondary bootloader, if any. Provide an empty string for "no secondary bootloader" , must be <= [4097] bytes including terminating '0'
 *@param firmware path to the firmware to be flashed , must be <= [4097] bytes including terminating '0'
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_UpdateFirmware_Response
 *@par Detailed description
 *Flashes the firmware into the mercury. TUNSDK must have been started in update mode (#TUNSDK_START_MODE_UPDATE) for this service to work.
 */
 
Te_tunsdk_status TUNSDK_UpdateFirmware(tunsdk_transid_t transId, Te_tunsdk_chipset chipset, const T_tunsdk_char* secondaryBootLoader, const T_tunsdk_char* firmware);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_UpdateFirmware has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : The operation succeeded
      
     #TUNSDK_RESULT_FAIL : The operation failed, e.g. because the files could not be found
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_UpdateFirmware_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_UpdateFirmware_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Informs about the progress achieved during firmware update- This callback will be called when a notification "UpdateFirmwareProgress" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *Informs about the progress achieved during firmware update. Progress is a value between 0 and 100. If a flashing procedure requires more than one step, the progress indication may go 0 to 100 multiple times, once for each step.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_UpdateFirmwareProgress_Notification_Handle::chipset
 *- #Ts_TUNSDK_On_UpdateFirmwareProgress_Notification_Handle::progress
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_UpdateFirmwareProgress_Notification(Ts_TUNSDK_On_UpdateFirmwareProgress_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Notifies one packet pf HDTPEG data.- This callback will be called when a notification "HdTpegData" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *One AAS packet of tpeg data to be reassembled in the client.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_HdTpegData_Notification_Handle::freqKHz
 *- #Ts_TUNSDK_On_HdTpegData_Notification_Handle::service
 *- #Ts_TUNSDK_On_HdTpegData_Notification_Handle::sequenceNumber
 *- #Ts_TUNSDK_On_HdTpegData_Notification_Handle::packet
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_HdTpegData_Notification(Ts_TUNSDK_On_HdTpegData_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Select or disable hdtpeg reception by TUNSDK 
 *@param transId transaction ID to keep track of response messages (it is not used by SetHdTpeg but will be returned to you with the response message)
 *@param hd_tpeg_service selected service. Use #TUNSDK_HDTPEG_SERVICE_NONE to turn HDTPEG off. 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_SetHdTpeg_Response
 *@par Detailed description
 *Service to select the HD TPEG service to be followed.
                The tuner will make available TPEG data from this service
                through #CTUNSDK_ClientBase::TUNSDK_On_HdTpegData_Notification. It will
                use a tuner of its choice, changing tuners and frequencies as
                reception conditions dictate. Only one HD TPEG service can be
                selected at a time.
                If the tuner can follow the HD TPEG service on the listened tuner,
                data will be received permanently. If reception requires to
                use a background tuner, the tuner will arbitrate freely
                between HD TPEG and its other background tasks.
                Selecting an HD TPEG service will result in the creation of a
                HD TPEG Channel. The client will get informed about the status
                of this channel through #CTUNSDK_ClientBase::TUNSDK_On_HdTpegChannel_Notification
                Data received will be made available through
                #CTUNSDK_ClientBase::TUNSDK_On_HdTpegData_Notification.
 */
 
Te_tunsdk_status TUNSDK_SetHdTpeg(tunsdk_transid_t transId, Te_tunsdk_hdtpeg_service hd_tpeg_service);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_SetHdTpeg has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : The TPEG service was selected
      
     #TUNSDK_RESULT_FAIL : The HD TPEG cannot be selected (check your parameters and device configuration)
      
 *@par Detailed description
 *This has currently no additional data in "outData", so the type is not documented.
 */
virtual void TUNSDK_On_SetHdTpeg_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_SetHdTpeg_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Notify HDTPEG channel information to interested clients- This callback will be called when a notification "HdTpegChannel" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *Notified interested clients about the TPEG channel state. You will get this
                   for several reasons including when you selected a new TPEG service through
                   SetHdTPEG or when tuner performed "TPEG service following" by
                   receiving the same service as before on another frequency.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_HdTpegChannel_Notification_Handle::freqKHz
 *- #Ts_TUNSDK_On_HdTpegChannel_Notification_Handle::hd_tpeg_service
 *- #Ts_TUNSDK_On_HdTpegChannel_Notification_Handle::channel_state
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_HdTpegChannel_Notification(Ts_TUNSDK_On_HdTpegChannel_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Brief send raw data to TPL 
 *@param transId transaction ID to keep track of response messages (it is not used by TplSend but will be returned to you with the response message)
 *@param requests the data to be sent to TPL 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_TplSend_Response
 *@par Detailed description
 *Sending raw data to TPL allows a client to communicate Note that TPL is not supported (and then also: not necessary) in all variants of TUNSDK.
 */
 
Te_tunsdk_status TUNSDK_TplSend(tunsdk_transid_t transId, Ts_tunsdk_rawBuf requests);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_TplSend has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : sending succeeded
      
     #TUNSDK_RESULT_NSUPPORTED : un case TPL is not supported in this version of TUNSDK
      
 *@par Detailed description
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_TplSend_Response_Handle::responses
 *@post When this callback returns, outData will become invalid, take a deep copy the data during the callback
 */
virtual void TUNSDK_On_TplSend_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_TplSend_Response_Handle outData) {/*empty default implementation*/};

/**
 *@brief Notifies the quality of the currently selected AM or FM station.- This callback will be called when a notification "AmFmReceptionQuality" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *This notification will inform about quality changes on the currently selected station with a relatively high update rate. This information is provided
                  for the client to e.g. perform linking to another non-TUNSDK audio source, e.g. IP Radio.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_AmFmReceptionQuality_Notification_Handle::quality
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_AmFmReceptionQuality_Notification(Ts_TUNSDK_On_AmFmReceptionQuality_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Notifies the quality of the currently selected DAB station. This is the quality measured by the audio decoder inside the DAB decoding chain.- This callback will be called when a notification "DabAudioQuality" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *This notification will inform about quality changes on the currently selected station with a relatively high update rate. This information is provided
                  for the client to e.g. perform linking to another non-TUNSDK audio source, e.g. IP Radio.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_DabAudioQuality_Notification_Handle::quality
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_DabAudioQuality_Notification(Ts_TUNSDK_On_DabAudioQuality_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief Informs about a newly recieved emergency alert- This callback will be called when a notification "HdEmergencyWarningAlert" has been received
 *@param outData opaque reference to notification Data. Use access functions to extract data        
 *
 *@par Detailed description
 *this message is triggered when an emergency warning has been received on a HD station.
 *
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_HdEmergencyWarningAlert_Notification_Handle::alert
 *
 *@post When this callback returns, outData will become invalid, take a deep copy of the data during the callback
 */
virtual void TUNSDK_On_HdEmergencyWarningAlert_Notification(Ts_TUNSDK_On_HdEmergencyWarningAlert_Notification_Handle outData)  {/*empty default implementation*/};

/**
 *@brief This function extracts an image out of TUNSDK's image database using an id received from TUNSDK 
 *@param transId transaction ID to keep track of response messages (it is not used by GetImage but will be returned to you with the response message)
 *@param imageId an id as received from TUNSDK, e.g. in #Ts_tunsdk_amfmhd_station_hd_Handle::logoId, #Ts_tunsdk_amfmhd_metaData_Handle::albumArtId. 
 *@return Returns #TUNSDK_STATUS_OK if the call succeeded and a message has been sent. Any other value indicates that no message has been sent
 *@see #TUNSDK_On_GetImage_Response
 *@par Detailed description
 *This function extracts an image out of TUNSDK's image database using an id received from TUNSDK. In case no image can be found for this ID, an error is returned.
 */
 
Te_tunsdk_status TUNSDK_GetImage(tunsdk_transid_t transId, uint32_t imageId);

/**
 *@brief This callback will be called when a response to #CTUNSDK_ClientBase::TUNSDK_GetImage has been received
 *@param transId transaction ID of this message as was given to the respective request
 *@param outData opaque reference to response Data. Use access functions to extract data
 *@param result Meaning of result codes:

     #TUNSDK_RESULT_OK : Request succeeded, image is contained in imageData
      
     #TUNSDK_RESULT_FAIL : Request failed, no image is contained in imageData
      
 *@par Detailed description
 * You can extract the following items from outData
 *- #Ts_TUNSDK_On_GetImage_Response_Handle::image
 *- #Ts_TUNSDK_On_GetImage_Response_Handle::imageIdOut
 *@post When this callback returns, outData will become invalid, take a deep copy the data during the callback
 */
virtual void TUNSDK_On_GetImage_Response(tunsdk_transid_t transId, Te_tunsdk_result result, Ts_TUNSDK_On_GetImage_Response_Handle outData) {/*empty default implementation*/};


}; /*CTUNSDK_ClientBase*/

#endif /* TUNSDK_CLIENTBASE_H_ */

/*=============================================================================
    end of file
=============================================================================*/

